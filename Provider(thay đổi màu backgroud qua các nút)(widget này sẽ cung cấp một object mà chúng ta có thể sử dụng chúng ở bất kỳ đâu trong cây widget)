add  provider: ^4.3.2+2

------------------- file themes -----------------------: gồm 4 màu

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

enum AppThemeKeys { orange,green,blue,yellow }
final Map<AppThemeKeys, ThemeData> _themes = {
  AppThemeKeys.orange: ThemeData(
    primaryColor: Colors.orange,
    accentColor: Colors.orange,
    backgroundColor: Colors.orange,
    brightness: Brightness.light,
  ),
  AppThemeKeys.green: ThemeData(
    primaryColor: Colors.lightGreenAccent,
    accentColor: Colors.lightGreenAccent,
    backgroundColor: Colors.lightGreenAccent,
    brightness: Brightness.dark,
  ),
  AppThemeKeys.blue: ThemeData(
    primaryColor: Colors.lightBlueAccent,
    accentColor: Colors.lightBlueAccent,
    backgroundColor: Colors.lightBlueAccent,
    brightness: Brightness.light,
  ),
  AppThemeKeys.yellow: ThemeData(
    primaryColor: Colors.yellowAccent,
    accentColor: Colors.yellowAccent,
    backgroundColor: Colors.yellowAccent,
    brightness: Brightness.dark,
  ),
};

class AppTheme extends ChangeNotifier {
  // Method này sẽ giúp chúng ta lấy AppTheme ra một cách dễ dàng hơn, thay vì
  // Provider.of<AppTheme>(context)
  // chúng ta chỉ cần
  // AppTheme.of(context)
  static AppTheme of(BuildContext context, {bool listen = false}) =>
      Provider.of<AppTheme>(context, listen: listen);

  // Đây sẽ là state chính của class, chứa tên của theme, mặc định mình set là light
  AppThemeKeys _themeKey = AppThemeKeys.orange;

  // Mình tạo thêm 2 cái getter này để dễ sử dụng hơn
  // currentTheme sẽ là theme hiện tại (là ThemeData không phải tên theme nữa)
  // currentThemeKey là tên theme hiện tại (mình không public _themeKey bởi vì
  // mình không muốn chỉnh sửa trực tiếp vào biến mà qua các setter vì còn cần notifyListeners() nữa)
  ThemeData get currentTheme => _themes[_themeKey];
  AppThemeKeys get currentThemeKey => _themeKey;

  // Đổi theme sang một theme khác
  void setTheme(AppThemeKeys themeKey) {
    _themeKey = themeKey;
    notifyListeners();
  }

  // Ở đây mình chỉ có 2 theme nên mình sẽ tạo thêm 1 method để demo dễ hơn. Method này sẽ switch giữa
  // light theme và dark theme
  void switchTheme() {
    _themeKey = AppThemeKeys.orange;
    notifyListeners();
  }
  void switchTheme1() {
    _themeKey = AppThemeKeys.green;
    notifyListeners();
  }
  void switchTheme2() {
    _themeKey = AppThemeKeys.blue;
    notifyListeners();
  }
  void switchTheme3() {
    _themeKey = AppThemeKeys.yellow;
    notifyListeners();
  }
}


------------------------------------------------------------file main.dart-------------------------------------
thay đổi phần void maid:
void main() {
  runApp(ChangeNotifierProvider(
    create: (_) => AppTheme(),
    child: MyApp(),
  ));
}
-------MaterialApp------
theme: AppTheme.of(context, listen: true).currentTheme,

-----------------------------------------------------------file chứa các nút thay đổi màu=----------------------------AppTheme _theme;
class _OnboardingScreenState extends State<OnboardingScreen> {


  @override
  void didChangeDependencies() {
    if (_theme == null) {
      _theme = AppTheme.of(context);
    }

    super.didChangeDependencies();
  }
}

nút: click:  (_theme?.switchTheme,) // chuyển màu

GestureDetector(
                    onTap: _theme?.switchTheme,
                    child: Container(
                      height: 44,
                      width: 44,
                      decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          border: Border.all(
                            width: 3,
                            color: Colors.white,
                          )),
                      child: DecoratedBox(
                          decoration: BoxDecoration(
                              color: Colors.orange, shape: BoxShape.circle)),
                    ),
                  ),
